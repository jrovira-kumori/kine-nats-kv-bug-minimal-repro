version: "3.8"

services:
  nats:
    image: 'nats:2.10.5'
    command: -js -m 8222 -DV

  # Cannot assign a healthcheck to NATS directly
  nats-healthcheck:
    image: 'natsio/nats-box:0.14.2'
    stop_signal: SIGKILL
    command: sleep infinity
    healthcheck:
      test: curl -sSf nats:8222/healthz
      interval: 2s
      timeout: 5s
      retries: 15
      start_period: 0s

  control-plane-seed:
    image: "rancher/k3s:${K3S_VERSION:-latest}"
    command: server --datastore-endpoint=nats://nats:4222
    tmpfs:
    - /run
    - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    restart: always
    environment:
    - K3S_TOKEN=${K3S_TOKEN:?err}
    - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
    - K3S_KUBECONFIG_MODE=666
    healthcheck:
      test: kubectl get nodes
      interval: 2s
      timeout: 5s
      retries: 15
      start_period: 0s
    volumes:
    # This is just so that we get the kubeconfig file out
    - .:/output
    ports:
      - 26443:6443  # Kubernetes API Server
      - 21080:80    # Ingress controller port 80
      - 21443:443   # Ingress controller port 443

  control-plane-node:
    image: "rancher/k3s:${K3S_VERSION:-latest}"
    command: server --datastore-endpoint=nats://nats:4222
    deploy:
      replicas: 2
    tmpfs:
    - /run
    - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    restart: always
    environment:
    - K3S_TOKEN=${K3S_TOKEN:?err}
    - K3S_URL=https://control-plane-seed:6443
    healthcheck:
      test: kubectl get nodes
      interval: 2s
      timeout: 5s
      retries: 15
      start_period: 0s

  agent:
    image: "rancher/k3s:${K3S_VERSION:-latest}"
    deploy:
      replicas: 3
    tmpfs:
    - /run
    - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    restart: always
    environment:
    - K3S_URL=https://control-plane-seed:6443
    - K3S_TOKEN=${K3S_TOKEN:?err}

  wait-for-cluster-ready:
    image: "alpine"
    command: /bin/sh -c "exit 0"
    depends_on:
      control-plane-seed:
        condition: service_healthy